{"version":3,"file":"static/js/478.31eb4846.chunk.js","mappings":"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","sources":["components/Pagination.jsx","components/Search.jsx","components/SortableHeader.jsx","pages/AllOrder.jsx"],"sourcesContent":["import React from 'react';\r\nimport { MdOutlineKeyboardDoubleArrowLeft, MdOutlineKeyboardDoubleArrowRight } from \"react-icons/md\";\r\n\r\nconst Pagination = ({ pageNumber, setPageNumber, totalItem, parPage, showItem }) => {\r\n    const totalPage = Math.ceil(totalItem / parPage);\r\n    \r\n    // Tính toán startPage và endPage\r\n    let startPage = Math.max(1, pageNumber - Math.floor(showItem / 2));\r\n    let endPage = Math.min(totalPage, startPage + showItem - 1);\r\n    \r\n    // Điều chỉnh nếu không đủ showItem\r\n    if (endPage - startPage + 1 < showItem) {\r\n        startPage = Math.max(1, endPage - showItem + 1);\r\n    }\r\n\r\n    const createBtn = () => {\r\n        const btns = [];\r\n        for (let i = startPage; i <= endPage; i++) {\r\n            if (i < 1 || i > totalPage) continue; // Đảm bảo chỉ tạo nút hợp lệ\r\n            btns.push(\r\n                <li \r\n                    key={i}\r\n                    onClick={() => setPageNumber(i)} \r\n                    className={`${pageNumber === i \r\n                        ? 'bg-blue-500 shadow-lg shadow-blue-300/50 text-white' \r\n                        : 'bg-white hover:bg-blue-100 shadow-md hover:shadow-blue-200/50 text-blue-500 border border-blue-200'} \r\n                        w-[33px] h-[33px] rounded-full flex justify-center items-center cursor-pointer`}\r\n                >\r\n                    {i}                    \r\n                </li>\r\n            ) \r\n        }\r\n        return btns;\r\n    }\r\n    \r\n    return (\r\n        <ul className='flex gap-3'>\r\n            {\r\n                pageNumber > 1 && \r\n                <li \r\n                    onClick={() => setPageNumber(pageNumber - 1)} \r\n                    className='w-[33px] h-[33px] rounded-full flex justify-center items-center bg-white text-blue-500 cursor-pointer border border-blue-200 hover:bg-blue-50'\r\n                >\r\n                    <MdOutlineKeyboardDoubleArrowLeft />\r\n                </li>\r\n            }\r\n            {\r\n                createBtn()\r\n            }\r\n            {\r\n                pageNumber < totalPage && \r\n                <li \r\n                    onClick={() => setPageNumber(pageNumber + 1)} \r\n                    className='w-[33px] h-[33px] rounded-full flex justify-center items-center bg-white text-blue-500 cursor-pointer border border-blue-200 hover:bg-blue-50'\r\n                >\r\n                    <MdOutlineKeyboardDoubleArrowRight />\r\n                </li>\r\n            }\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\n\r\nconst Search = ({setParPage, setSearchValue, searchValue}) => {\r\n    return (\r\n            <div className='flex items-center gap-2'>\r\n                <span className=\"text-gray-700 text-xl italic\">Hiện thị</span>\r\n                <select \r\n                    onChange={(e) => setParPage(parseInt(e.target.value))} \r\n                    className='px-4 py-2 bg-white text-black border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent'\r\n                >\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"20\">20</option> \r\n                </select>\r\n            </div>\r\n    );\r\n}; \r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';\r\n\r\nconst SortableHeader = ({ label, field, sortField, sortOrder, onSort, className }) => {\r\n  const getSortIcon = () => {\r\n    if (sortField !== field) {\r\n      return <FaSort className=\"ml-1 inline\" />;\r\n    }\r\n    return sortOrder === 'asc' ? <FaSortUp className=\"ml-1 inline\" /> : <FaSortDown className=\"ml-1 inline\" />;\r\n  };\r\n\r\n  return (\r\n    <th \r\n      scope='col' \r\n      className={`py-3 px-4 cursor-pointer ${className}`} \r\n      onClick={() => onSort(field)}\r\n    >\r\n      {label} {getSortIcon()}\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default SortableHeader;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Search from \"../components/Search\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { get_allOrder } from \"../store/reducers/orderReducer\";\r\nimport Pagination from \"../components/Pagination\";\r\nimport SortableHeader from \"../components/SortableHeader\";\r\nimport { useNavigate, Outlet } from \"react-router-dom\";\r\n\r\nconst AllOrder = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [parPage, setParPage] = useState(5);\r\n  const [sortField, setSortField] = useState(\"\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n\r\n  const { orders = [], totalOrders = 0 } = useSelector(\r\n    (state) => state.order || {}\r\n  );\r\n\r\n  useEffect(() => {\r\n    const params = {\r\n      parPage: parseInt(parPage),\r\n      page: parseInt(currentPage),\r\n      searchValue,\r\n      sortField,\r\n      sortOrder,\r\n    };\r\n    dispatch(get_allOrder(params));\r\n  }, [searchValue, currentPage, parPage, sortField, sortOrder]);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [searchValue, parPage]);\r\n\r\n  const handleViewDetail = (orderId) => {\r\n    navigate(`/admin/order/${orderId}`);\r\n  };\r\n\r\n  const handleSort = (field) => {\r\n    if (sortField === field) {\r\n      setSortOrder((prev) => (prev === \"asc\" ? \"desc\" : \"asc\"));\r\n    } else {\r\n      setSortField(field);\r\n      setSortOrder(\"asc\");\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status) => {\r\n    switch (status) {\r\n      case \"PAID\":\r\n      case \"UNPAID\":\r\n        return \"Đơn hàng mới\";\r\n      case \"PREPARING_ORDER\":\r\n        return \"Đang chuẩn bị\";\r\n      case \"ORDER_CANCELED\":\r\n        return \"Đơn bị hủy\";\r\n      case \"ORDER_RECEIVED\":\r\n        return \"Đã giao cho shipper\";\r\n      case \"DELIVERING\":\r\n        return \"Shipper đang lấy đơn\";\r\n      case \"ORDER_CONFIRMED\":\r\n        return \"Đã giao xong\";\r\n      default:\r\n        return \"Không xác định\";\r\n    }\r\n  };\r\n\r\n  const getSortedData = () => {\r\n    let data = [...orders];\r\n    if (sortField) {\r\n      data.sort((a, b) => {\r\n        let valueA = a[sortField];\r\n        let valueB = b[sortField];\r\n\r\n        if (sortField === \"id\") {\r\n          valueA = parseInt(valueA);\r\n          valueB = parseInt(valueB);\r\n        } else if (typeof valueA === \"string\") {\r\n          valueA = valueA.toLowerCase();\r\n          valueB = valueB.toLowerCase();\r\n        }\r\n\r\n        if (valueA < valueB) return sortOrder === \"asc\" ? -1 : 1;\r\n        if (valueA > valueB) return sortOrder === \"asc\" ? 1 : -1;\r\n        return 0;\r\n      });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const paginatedData = getSortedData().slice(\r\n    (currentPage - 1) * parPage,\r\n    currentPage * parPage\r\n  );\r\n\r\n  return (\r\n    <div className=\"px-2 lg:px-7 pt-5\">\r\n      <h1 className=\"text-4xl font-semibold text-gray-800 mb-4\">\r\n        Danh sách đơn hàng\r\n      </h1>\r\n\r\n      <Search\r\n        setParPage={setParPage}\r\n        setSearchValue={setSearchValue}\r\n        searchValue={searchValue}\r\n      />\r\n\r\n      <div className=\"overflow-x-auto mt-4 bg-white shadow rounded-lg\">\r\n        <table className=\"w-full text-left text-sm text-gray-700\">\r\n          <thead className=\"bg-gray-100 text-base uppercase border-b border-gray-200\">\r\n            <tr>\r\n              <SortableHeader\r\n                label=\"No\"\r\n                field=\"id\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[5%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Người đặt\"\r\n                field=\"receiver_name\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[15%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Địa chỉ\"\r\n                field=\"address_receiver\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[25%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Điện thoại\"\r\n                field=\"phone_number\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[15%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Tổng tiền\"\r\n                field=\"price\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[10%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Trạng thái\"\r\n                field=\"order_status\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[15%]\"\r\n              />\r\n              <SortableHeader\r\n                label=\"Ngày đặt\"\r\n                field=\"order_date\"\r\n                sortField={sortField}\r\n                sortOrder={sortOrder}\r\n                onSort={handleSort}\r\n                className=\"w-[15%]\"\r\n              />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {paginatedData.map((order, index) => (\r\n              <tr\r\n                key={order.id}\r\n                onClick={() => handleViewDetail(order.id)}\r\n                className=\"border-b hover:bg-gray-50 font-medium cursor-pointer text-xl\"\r\n              >\r\n                <td className=\"px-4 py-3\">\r\n                  {(currentPage - 1) * parPage + index + 1}\r\n                </td>\r\n                <td className=\"px-4 py-3\">{order.receiver_name}</td>\r\n                <td className=\"px-4 py-3 truncate max-w-xs\">\r\n                  {order.address_receiver}\r\n                </td>\r\n                <td className=\"px-4 py-3\">{order.phone_number}</td>\r\n                <td className=\"px-4 py-3\">\r\n                  {parseInt(order.price, 10)?.toLocaleString()}₫\r\n                </td>\r\n                <td className=\"px-4 py-3\">\r\n                  <span\r\n                    className={`text-base px-2 py-1 rounded-full border ${\r\n                      order.order_status === \"PAID\"\r\n                        ? \"bg-red-100 text-red-600 border-red-400\"\r\n                        : order.order_status === \"PREPARING_ORDER\"\r\n                        ? \"bg-orange-100 text-orange-600 border-orange-400\"\r\n                        : order.order_status === \"ORDER_CANCELED\"\r\n                        ? \"bg-red-200 text-red-700 border-red-500\"\r\n                        : order.order_status === \"ORDER_RECEIVED\"\r\n                        ? \"bg-purple-100 text-purple-600 border-purple-400\"\r\n                        : order.order_status === \"DELIVERING\"\r\n                        ? \"bg-blue-100 text-blue-600 border-blue-400\"\r\n                        : order.order_status === \"ORDER_CONFIRMED\"\r\n                        ? \"bg-green-100 text-green-600 border-green-400\"\r\n                        : \"bg-gray-200 text-gray-700 border-gray-400\"\r\n                    }`}\r\n                  >\r\n                    {getStatusText(order.order_status)}\r\n                  </span>\r\n                </td>\r\n                <td className=\"px-4 py-3\">\r\n                  {new Date(order.order_date).toLocaleDateString()}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"flex justify-end mt-4\">\r\n        <Pagination\r\n          pageNumber={currentPage}\r\n          setPageNumber={setCurrentPage}\r\n          totalItem={totalOrders}\r\n          parPage={parPage}\r\n          showItem={3}\r\n        />\r\n      </div>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllOrder;\r\n"],"names":["_ref","pageNumber","setPageNumber","totalItem","parPage","showItem","totalPage","Math","ceil","startPage","max","floor","endPage","min","_jsxs","className","children","_jsx","onClick","MdOutlineKeyboardDoubleArrowLeft","createBtn","btns","i","push","concat","MdOutlineKeyboardDoubleArrowRight","setParPage","setSearchValue","searchValue","onChange","e","parseInt","target","value","label","field","sortField","sortOrder","onSort","scope","FaSort","FaSortUp","FaSortDown","AllOrder","dispatch","useDispatch","navigate","useNavigate","currentPage","setCurrentPage","useState","setSortField","setSortOrder","orders","totalOrders","useSelector","state","order","useEffect","params","page","get_allOrder","handleSort","prev","getStatusText","status","paginatedData","getSortedData","data","sort","a","b","valueA","valueB","toLowerCase","slice","Search","SortableHeader","map","index","_parseInt","handleViewDetail","orderId","id","receiver_name","address_receiver","phone_number","price","toLocaleString","order_status","Date","order_date","toLocaleDateString","Pagination","Outlet"],"sourceRoot":""}